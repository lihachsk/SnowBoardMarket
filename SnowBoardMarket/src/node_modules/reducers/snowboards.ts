import { Action, Reducer } from 'redux';
import * as R from 'ramda';
import {
    FETCH_SNOWBOARDS_SUCCESS,
    LOAD_MORE_SNOWBOARDS_SUCCESS,
    FETCH_SNOWBOARD_BY_ID_SUCCESS,
    FETCH_CATEGORIES_SUCCESS,
    FETCH_CATEGORIES_FAILURE,
    FETCH_CATEGORIES_START
} from 'actionTypes';
import categories from 'api/mockCategories';
import { 
    fetchSnowboards,
    loadMoreSnowboards,
    addSnowboardToBasket,
    fetchCategories
} from 'actions';

export interface ISnowBoards {
    snowboards:any
    appSettings:any
};


const initialState = {
};

export const actionCreators = {
    fetchSnowboards: fetchSnowboards,
    loadMoreSnowboards: loadMoreSnowboards,
    addSnowboardToBasket: addSnowboardToBasket,
    fetchCategories: fetchCategories
}

export default (state = initialState, {type, payload}) => {
    switch(type) {
        case FETCH_SNOWBOARDS_SUCCESS:
            const newValues = R.indexBy(R.prop('id'), payload);
            return R.merge(state, newValues);
        case LOAD_MORE_SNOWBOARDS_SUCCESS:
            const moreValues = R.indexBy(R.prop('id'), payload);
            return R.merge(state, moreValues);
        case FETCH_SNOWBOARD_BY_ID_SUCCESS:
            return R.assoc(payload.id, payload, state);
        default:
            return state || initialState;
    }
} 