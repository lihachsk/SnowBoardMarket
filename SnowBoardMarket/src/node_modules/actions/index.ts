import {
    FETCH_SNOWBOARDS_FAILURE,
    FETCH_SNOWBOARDS_START,
    FETCH_SNOWBOARDS_SUCCESS,
    LOAD_MORE_SNOWBOARDS_FAILURE,
    LOAD_MORE_SNOWBOARDS_START,
    LOAD_MORE_SNOWBOARDS_SUCCESS,
    FETCH_SNOWBOARD_BY_ID_FAILURE,
    FETCH_SNOWBOARD_BY_ID_START,
    FETCH_SNOWBOARD_BY_ID_SUCCESS,
    ADD_SNOWBOARD_TO_BASKET,
    SEARCH_SNOWBOARD,
    FETCH_CATEGORIES_FAILURE,
    FETCH_CATEGORIES_START,
    FETCH_CATEGORIES_SUCCESS,
    REMOVE_SNOWBOARD_FROM_BASKET,
    CLEAN_BASKET
} from 'actionTypes';
import { getRenderedSnowboardsLength } from 'selectors';

import {
    fetchSnowboards as fetchSnowboardsApi,
    loadMoreSnowboards as loadMoreSnowboardsApi,
    fetchSnowboardById as fetchSnowboardByIdApi,
    fetchCategories as fetchCategoriesApi
} from 'api'
import snowboards from 'reducers/snowboards';

export const fetchSnowboards = (basketUri) => async dispatch =>{
    dispatch({type: FETCH_SNOWBOARDS_START});

    try
    {
        const snowboards = await fetchSnowboardsApi(basketUri);
        dispatch({
            type: FETCH_SNOWBOARDS_SUCCESS,
            payload: snowboards
        })
    }
    catch(err)
    {
        dispatch({
            type: FETCH_SNOWBOARDS_FAILURE,
            payload: err,
            error: true
        });
    }
}

export const loadMoreSnowboards = () => async (dispatch, getState) =>{
    const offset = getRenderedSnowboardsLength(getState());
    dispatch({type: LOAD_MORE_SNOWBOARDS_START});

    try
    {
        const snowboards = await loadMoreSnowboardsApi({offset});
        dispatch({
            type: LOAD_MORE_SNOWBOARDS_SUCCESS,
            payload: snowboards
        })
    }
    catch(err)
    {
        dispatch({
            type: LOAD_MORE_SNOWBOARDS_FAILURE,
            payload: err,
            error: true
        });
    }
}

export const fetchSnowboardById = (id: string) => async (dispatch, getState) =>{
    dispatch({type: FETCH_SNOWBOARD_BY_ID_START});

    try
    {
        const snowboard = await fetchSnowboardByIdApi(id);
        dispatch({
            type: FETCH_SNOWBOARD_BY_ID_SUCCESS,
            payload: snowboard
        })
    }
    catch(err)
    {
        dispatch({
            type: FETCH_SNOWBOARD_BY_ID_FAILURE,
            payload: err,
            error: true
        });
    }
}

export const addSnowboardToBasket = id => dispatch => {
    dispatch({
        type: ADD_SNOWBOARD_TO_BASKET,
        payload: id
    })
}

export const searchPhone = text => dispatch => {
    dispatch({
        type: SEARCH_SNOWBOARD,
        payload: text
    })
}

export const fetchCategories = () => async dispatch => {
    dispatch({type: FETCH_CATEGORIES_START});

    try
    {
        const categories = await fetchCategoriesApi();
        dispatch({
            type: FETCH_CATEGORIES_SUCCESS,
            payload: categories
        })
    }
    catch(err)
    {
        dispatch({
            type: FETCH_CATEGORIES_FAILURE,
            payload: err,
            error: true
        });
    }
}

export const removeSnowboardFromBasket = id => dispatch => {
    dispatch({
        type: REMOVE_SNOWBOARD_FROM_BASKET,
        payload: id
    });
}

export const cleanBasket = () => dispatch => {
    dispatch({
        type: CLEAN_BASKET
    })
}

export const basketCheckout = snowboards => () => {
    alert(JSON.stringify(snowboards));
}