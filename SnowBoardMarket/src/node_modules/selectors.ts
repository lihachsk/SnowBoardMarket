import * as R from 'ramda';
import { ApplicationState } from 'reducers';
import { unstable_renderSubtreeIntoContainer } from 'react-dom';
export const getSnowboardById = (state, id) => {
    return R.prop(id, state.snowboards);
}

export const getSnowboards = (state,ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps);
    const activeCattegoryIdBool = activeCategoryId != undefined && activeCategoryId != null;
    const applySearch = item => R.contains(
        state.snowboardsPage.search.toLowerCase(),
        R.prop('name', item).toLowerCase()
    );
    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop('categoryId', item)
    );
    const snowboards = R.compose(
        R.filter(applySearch),
        R.when(R.always(activeCattegoryIdBool),R.filter(applyCategory)),
        R.map(id => getSnowboardById(state, id))
    )(state.snowboardsPage.ids);

    return snowboards;
}

export const getRenderedSnowboardsLength = state => R.length(state.snowboardPage.ids);

export const getTotalBasketCount = state => R.length(state.basket);

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        R.sum,
        R.pluck('price'),
        R.map(id => getSnowboardById(state, id))
    )(state.basket);

    return totalPrice;
}

export const getCategories = state => R.values(state.categories);

export const getActiveCategoryId = ownProps => {
    let id = R.path(['match','params', 'id'], ownProps);

    if (id === undefined)
    {
        return id;
    }
    else
    {
        return +id;
    }
}

export const getActiveMenu = ownProps => R.path(['location','pathname' ], ownProps);
  
export const getBasketSnowboardsWithCount = state => {
    const uniqueIds = R.uniq(state.basket);
    const snowboardCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket)
    const snowboardWithCount = snowboard => R.assoc('count', snowboardCount(snowboard.id), snowboard)
    const snowboards = R.compose(
        R.map(snowboardWithCount),
        R.map(id => getSnowboardById(state, id))
    )(uniqueIds)

    return snowboards;
}
