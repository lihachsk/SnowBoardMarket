import * as React from 'react';
import { connect } from 'react-redux';
import { asyncConnect } from 'redux-connect';
import { Link } from 'react-router-dom';
import * as R from 'ramda';

import Menu from './Menu';
import * as SnowboardsStore from 'reducers/snowboards';
import {
    fetchSnowboards,
    loadMoreSnowboards,
    addSnowboardToBasket,
    fetchCategories
} from 'actions';
import { getSnowboards } from 'selectors';
import { ApplicationState } from 'reducers';
import Layout from './Layout';
import Sidebar from 'components/sidebar';
import MetaTags from 'react-meta-tags';

type SnowboardsProps = SnowboardsStore.ISnowBoards
                      & typeof SnowboardsStore.actionCreators;

class SnowBoards extends React.Component<SnowboardsProps,{}> {
    componentWillMount() {
        // This method runs when the component is first added to the page
        this.props.fetchSnowboards(this.props.appSettings.basketUri);
        this.props.fetchCategories();
    }

    componentWillReceiveProps(nextProps: SnowboardsProps) {
        // This method runs when incoming props (e.g., route params) change
        //this.props.fetchSnowboards();
        //this.props.fetchCategories();
    }

    renderSnowboards(snowboard, index){
        const { addSnowboardToBasket, appSettings } = this.props;
        const shortDescription = `${R.take(60, snowboard.description)}...`;
        return (
            <div className="col-sm-4 col-lg-4 col-md-4 book-list" key={index}>
                <img
                    className="img-thumbnail"
                    src={`${appSettings.domainUri}${snowboard.image}`}
                    alt={snowboard.name}
                />
                <div className="caption">
                    <h4 className="pull-right">${snowboard.price}</h4>
                    <h4>
                        <Link to={`/snowboard/${snowboard.id}`}>
                            {snowboard.name}
                        </Link>
                    </h4>
                    <p>{shortDescription}</p>
                    <p>
                        <button
                            className='btn btn-primary'
                            onClick={() => addSnowboardToBasket(snowboard.id)}
                        >
                            Buy now!
                        </button>
                        <Link to={`/snowboard/${snowboard.id}`} className='btn btn-default'>
                            More info
                        </Link>
                    </p>
                </div>
            </div>
        );
    }

    render() {
        const { snowboards, loadMoreSnowboards } = this.props;
        return (
            <div>
                <MetaTags>
                    <title>Snowboards</title>
                    <meta name="description" content="Some Snowboards." />
                    <meta property="og:title" content="Snowboards" />
                    <meta property="og:image" content="path/to/image.jpg" />
                </MetaTags>
                <div className="books row">
                    <div className='col-md-3'>
                        <Sidebar />
                    </div>
                    <div className='col-md-9'>
                        {snowboards.map((snowboard, index) => this.renderSnowboards(snowboard, index))}
                    </div>
                </div>
                <div className='row'>
                    <div className='col-md-12'>
                        <button
                            onClick={loadMoreSnowboards}
                            className='pull-right btn btn-primary'
                        >
                            Load More
                        </button>
                    </div>
                </div>
            </div>
        );
    };
};

export const mapStateToProps = (state: ApplicationState, ownProps) => ({
    snowboards: getSnowboards(state, ownProps),
    appSettings: state.appSettings
})

export const mapDispatchToProps = {
    fetchSnowboards,
    loadMoreSnowboards,
    addSnowboardToBasket,
    fetchCategories
}

export default connect(mapStateToProps, mapDispatchToProps)(SnowBoards)