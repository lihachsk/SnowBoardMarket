import * as React from 'react';
import { connect } from 'react-redux';
import { fetchSnowboardById, addSnowboardToBasket } from 'actions';
import * as SnowboardStore from 'reducers/snowboardPage';
import { RouteComponentProps, Link } from 'react-router-dom';
import { ApplicationState } from 'reducers';
import { getSnowboardById } from 'selectors';
import * as R from 'ramda';
import BasketCart from 'components/basketCard';
import {IBasketCard} from 'reducers/basketCard';

interface ISnowboardRouterProps {
    id: string
}

interface ISnowboardProps extends RouteComponentProps<ISnowboardRouterProps> {
}

type SnowboardProps = SnowboardStore.ISnowboard
                      & typeof SnowboardStore.actionCreators
                      & ISnowboardProps;

class Snowboard extends React.Component<SnowboardProps, {}> {
    componentDidMount () {
        this.props.fetchSnowboardById(this.props.match.params.id);
    }
    renderFields(snowboard){
        const columnFields = R.compose(
            R.toPairs,
            R.pick([
                'cpu',
                'camera',
                'size',
                'weight',
                'display',
                'battery',
                'memory'
            ])
        )(snowboard);
        return columnFields.map(([key, value]) => (
            <div
                className='column'
                key={key}
            >
                <div className='ab-details-title'>
                    <p>{key}</p>
                </div>
                <div className='ab-details-info'>
                    {value}
                </div>
            </div>
        ));
    }
    renderContent(snowboard) {
        return (
        <div className='thumbnail'> 
            <div className='row'>
                <div className='col-md-6'>
                    <img
                        className='img-thumbnail'
                        src={snowboard.image}
                        alt={snowboard.name}
                    />
                </div>
                <div className='col-md-6'>
                    {this.renderFields(snowboard)}
                </div>
            </div>
            <div className='caption-full'>
                <h4 className='pull-right'>${snowboard.price}</h4>
                <h4>{snowboard.name}</h4>
                <p>{snowboard.description}</p>
            </div>
        </div>
        );
    }
    renderSidebar(snowboard) {
        const {addSnowboardToBasket} = this.props;
        return (
            <div>
                <p className='lead'>Quick shop</p>
                <BasketCart {...{} as IBasketCard} />
                <div className='form-group'>
                    <h1>{snowboard.name}</h1>
                    <h2>${snowboard.price}</h2>
                </div>
                <Link
                    to='/snowboards'
                    className='btn btn-primary btn-block'
                >
                    Back to sotre
                </Link>
                <button
                    type='button'
                    className='btn btn-success btn-block'
                    onClick={() => addSnowboardToBasket(snowboard.id)}
                >
                    Add to cart
                </button>
            </div>
        )
    }
    render() {
        const {snowboard} = this.props;
        return (
            <div>
                <div className='row'>
                    <div className='col-md-9'>
                        {snowboard && this.renderContent(snowboard)}
                    </div>
                    <div className='col-md-3'>
                        {snowboard && this.renderSidebar(snowboard)}
                    </div>
                </div>
            </div>
        );
    }
}

const mapStateToProps = (state: ApplicationState) => ({
    snowboard: getSnowboardById(state, state.snowboardPage.id)
})

const mapDispatchToProps = {
    fetchSnowboardById: SnowboardStore.actionCreators.fetchSnowboardById,
    addSnowboardToBasket: SnowboardStore.actionCreators.addSnowboardToBasket
}
export default connect(mapStateToProps, mapDispatchToProps)(Snowboard);

