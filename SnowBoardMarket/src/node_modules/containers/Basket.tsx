import * as React from 'react';
import {connect} from 'react-redux';
import {
    getBasketSnowboardsWithCount,
    getTotalBasketPrice
} from 'selectors';
import {
    removeSnowboardFromBasket,
    cleanBasket,
    basketCheckout
} from 'actions';
import {IBasket, actionCreator} from 'reducers/basket';
import snowboards from 'reducers/snowboards';
import R = require('ramda');
import { Link } from 'react-router-dom';

type BasketProps = IBasket &
                   typeof actionCreator;

class Basket extends React.Component<BasketProps,{}> {
    isBasketEmpty = R.isEmpty(this.props.snowboards);
    renderContent(){
        return(
            <div>
              {this.isBasketEmpty && <div>Your shopping cart is empty</div>}
      
              <div className='table-responsive'>
                <table className='table  table-inverse'>
                  <tbody>
                  {this.props.snowboards.map((snowboard, index) => (
                    <tr
                      key={index}
                    >
                      <td>
                        <img
                          className='img-thumbnail'
                          src={snowboard.image}
                          alt={snowboard.name}
                        />
                      </td>
                      <td>{snowboard.name}</td>
                      <td>${snowboard.price}</td>
                      <td>{snowboard.count}</td>
                      <td>
                        <span
                            className='fas fa-trash'
                            onClick={() => this.props.removeSnowboardFromBasket(snowboard.id)}
                        >
                        </span>
                      </td>
                    </tr>
                  ))}
                  </tbody>
                </table>
              </div>
              {
                R.not(this.isBasketEmpty) &&
                <div className='row'>
                  <div className='pull-right total-user-checkout'>
                    <b>Total:</b>
                    ${this.props.totalPrice}
                  </div>
                </div>
              }
            </div>
          )
    }
    renderSidebar() {
        return (
            <div>
                <Link
                    to='/'
                    className='btn btn-info btn-block'
                >
                    <span className='fas fa-info-circle' />&nbsp;
                    <span>Continue shopping</span>
                </Link>
                {
                    R.not(this.isBasketEmpty) &&
                    <div className='btn-block'>
                        <button
                            onClick={this.props.cleanBasket}
                            className='btn btn-danger btn-block'
                        >
                            <span className='fas fa-trash' />
                            &nbsp;Clear card
                        </button>
                        <button
                            onClick={() => this.props.basketCheckout(this.props.snowboards)}
                            className='btn btn-success btn-block'
                        >
                            <span className='fas fa-envelope' />
                            &nbsp;Checkout
                        </button>
                    </div>
                }
            </div>
        )
    }
    render(){
        return(
            <div className='view-container'>
                <div className='container'>
                    <div className='row'>
                        <div className='col-md-9'>
                            {this.renderContent()}
                        </div>
                        <div className='col-md-3'>
                            {this.renderSidebar()}
                        </div>
                    </div>
                </div>
            </div>
        )
    }
}

const mapStateToProps = state => ({
    snowboards: getBasketSnowboardsWithCount(state),
    totalPrice: getTotalBasketPrice(state)
})

const mapDispatchToProps ={
    removeSnowboardFromBasket: actionCreator.removeSnowboardFromBasket,
    cleanBasket: actionCreator.cleanBasket,
    basketCheckout: actionCreator.basketCheckout
}

export default connect(mapStateToProps, mapDispatchToProps)(Basket);